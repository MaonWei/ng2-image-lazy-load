{"name":"ng2-image-lazy-load","tagline":"Angular2 image lazy loader library.","body":"# ng2-image-lazy-load\r\n\r\nDemo: https://ng2-image-lazy-load-demo.herokuapp.com\r\n\r\n## Installation\r\n```sh\r\nnpm install ng2-image-lazy-load --save\r\n```\r\n\r\nIf you use SystemJS to load your files (like the demo), you might have to update your config with this:\r\n```js\r\nSystem.config({\r\n    map: {\r\n        'ng2-image-lazy-load': 'node_modules/ng2-image-lazy-load'\r\n    }\r\n});\r\n```\r\n\r\n## Example implementation\r\n\r\nYou will need to add `IMAGELAZYLOAD_PROVIDERS` in the bootstrap of your application.\r\n\r\nThis library utilizes `WebWorkers` (https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) for background loading of images. \r\n\r\nBy default, the location of the worker file is `assets/js/xhrWorker.js`. You can copy the `xhrWorker.js` file for your own use from this repo or you can create your own.\r\n\r\nTo set a custom path to load your worker file:\r\n```\r\nWebWorker.workerUrl = 'path/to/your/custom_worker.js'\r\n```\r\nThe example below will help illustrate this.\r\n\r\nAlso, ensure you've loaded the angular2/http bundle as well as this library falls back to using `Http` wherever `Worker` is not supported.\r\n\r\n```js\r\nimport {Component} from 'angular2/angular2';\r\nimport {HTTP_PROVIDERS} from 'angular2/http';\r\nimport {\r\n  IMAGELAZYLOAD_PROVIDERS, \r\n  IMAGELAZYLOAD_DIRECTIVES, \r\n  WebWorker} from 'ng2-image-lazy-load';\r\n\r\n@Component({\r\n    selector: 'app',\r\n    template: `\r\n      <div image-lazy-load-area>\r\n        <div *ng-for=\"#image of images\">\r\n          <img [image-lazy-load-item]=\"image.url\"/>\r\n        </div>\r\n      </div>\r\n    `,\r\n    directives: [IMAGELAZYLOAD_DIRECTIVES]\r\n})\r\nexport class App {\r\n    public images: Array<any> = [\r\n      {\r\n        name:`image 1`,\r\n        url:`image.jpg`\r\n      },\r\n      {\r\n        name:`image 2`,\r\n        url:`image_2.jpg`\r\n      }\r\n    ];\r\n    constructor() {\r\n        // defaults to 'assets/js/xhrWorker.js'\r\n        WebWorker.workerUrl = 'path/to/your/custom_worker.js'; \r\n    }\r\n}\r\n\r\nbootstrap(App, [\r\n    HTTP_PROVIDERS,\r\n    IMAGELAZYLOAD_PROVIDERS\r\n]);\r\n```\r\n\r\n## API\r\n### ImageLazyLoader\r\n#### Properties:\r\n- `imageCache:any`: Object where the key is the url of the image the library has already loaded and doesn't need to be loaded again. i.e., {'http://domain.com/image.png':true}\r\n    \r\n#### Methods:\r\n- `load(url: string, headers?: any): Promise<any>`: Load url with optional custom headers\r\n- `loadViaWorker(url: string, headers?: any): Promise<any>`: Use a webworker directly to load url with optional custom headers\r\n- `loadViaHttp(url: string, headers?: any): Promise<any>`: Use the `Http` service directly to load url with optional custom headers\r\n\r\n### WebWorker\r\n##### This is a helper service used by the library that wraps the usage of the browser's `Worker` api, however you can use it directly if you'd like to interact with it.\r\n#### Properties:\r\n- `static supported: boolean`: Determine if workers are supported\r\n- `static workerUrl: string`: Used to set the path to a worker file. Defaults to 'assets/js/xhrWorker.js'\r\n- `activeWorkers: Array<any>`: At any given moment, this can be checked to see how many workers are currently activated\r\n    \r\n#### Methods:\r\n- `load(config: any, msgFn: any, errorFn?: any):number`: Load a configuration with your worker and wire it to a `message` function and/or an `error` function. Returns an `id` which can be used to terminate the worker.\r\n- `terminate(id: number)`: Terminate the worker \r\n\r\n\r\n**Note:** Angular 2.0 is not production ready yet! Therefore, this library isn't either.\r\n\r\n# How to contribute\r\n\r\nSee [CONTRIBUTING](https://github.com/NathanWalker/ng2-image-lazy-load/blob/master/CONTRIBUTING.md)\r\n\r\n# Big Thank You\r\n\r\nThis library was made possible with help from this article by [Olivier Combe](https://github.com/ocombe):\r\nhttps://medium.com/@OCombe/how-to-publish-a-library-for-angular-2-on-npm-5f48cdabf435\r\n\r\nAlso, this project setup is based on the excellent [angular2-seed](https://github.com/mgechev/angular2-seed) by [Minko Gechev](https://github.com/mgechev).\r\n\r\n# License\r\n\r\nMIT\r\n","google":"UA-70114464-1","note":"Don't delete this file! It's used internally to help with page regeneration."}